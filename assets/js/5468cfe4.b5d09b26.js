"use strict";(self.webpackChunkknowledge_core=self.webpackChunkknowledge_core||[]).push([[4682],{653:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var t=s(4848),i=s(8453);const o={sidebar_position:1,title:"Typescript Language",sidebar_label:"Typescript"},a=void 0,r={id:"essential-dev-utils/languages/typescript",title:"Typescript Language",description:"Using Jest Spy Instances for Testing",source:"@site/docs/essential-dev-utils/languages/typescript.md",sourceDirName:"essential-dev-utils/languages",slug:"/essential-dev-utils/languages/typescript",permalink:"/knowledge-core/docs/essential-dev-utils/languages/typescript",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/essential-dev-utils/languages/typescript.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Typescript Language",sidebar_label:"Typescript"},sidebar:"tutorialSidebar",previous:{title:"Programming Languages",permalink:"/knowledge-core/docs/category/programming-languages"},next:{title:"Python",permalink:"/knowledge-core/docs/essential-dev-utils/languages/python"}},l={},c=[{value:"Using Jest Spy Instances for Testing",id:"using-jest-spy-instances-for-testing",level:2},{value:"Explanation",id:"explanation",level:3},{value:"Benefits",id:"benefits",level:3},{value:"Logs When a Node.js Instance Crashes",id:"logs-when-a-nodejs-instance-crashes",level:2},{value:"Explanation",id:"explanation-1",level:3},{value:"Example",id:"example",level:3},{value:"Mocking and Testing with Jest in TypeScript",id:"mocking-and-testing-with-jest-in-typescript",level:2},{value:"<strong>1. Base Code</strong>",id:"1-base-code",level:3},{value:"<strong>2. Minimal Test Example</strong>",id:"2-minimal-test-example",level:3},{value:"\ud83d\udcd6 <strong>Jest Docs</strong>: https://jestjs.io/docs/api",id:"-jest-docs-httpsjestjsiodocsapi",level:2}];function d(e){const n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"using-jest-spy-instances-for-testing",children:"Using Jest Spy Instances for Testing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'let spy: jest.SpyInstance;\n\nbeforeEach(() => {\n  spy = jest\n    .spyOn(someModule, "someMethod")\n    .mockImplementation(defaultValue);\n});\n\nafterEach(() => {\n  spy.mockRestore();\n});\n'})}),"\n",(0,t.jsx)(n.h3,{id:"explanation",children:"Explanation"}),"\n",(0,t.jsx)(n.p,{children:"This code snippet demonstrates how to use Jest's spy functions to mock and restore functionality during testing. Below is a detailed explanation of each part:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"let spy: jest.SpyInstance;"})}),(0,t.jsx)(n.br,{}),"\n","Declares a variable ",(0,t.jsx)(n.code,{children:"spy"})," to hold the spy instance. This ensures the spy can be accessed and restored later in the test lifecycle."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"beforeEach(() => { ... });"})}),(0,t.jsx)(n.br,{}),"\n","Defines a setup function that runs before each test case. Inside this block:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"jest.spyOn"}),": Creates a spy for the ",(0,t.jsx)(n.code,{children:"someMethod"})," method of the ",(0,t.jsx)(n.code,{children:"someModule"})," object."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:".mockImplementation"}),": Temporarily replaces the original implementation with the ",(0,t.jsx)(n.code,{children:"defaultValue"})," function for controlled testing."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"afterEach(() => { ... });"})}),(0,t.jsx)(n.br,{}),"\n","Defines a cleanup function that runs after each test case. It calls ",(0,t.jsx)(n.code,{children:"spy.mockRestore()"})," to:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Remove the mocked implementation."}),"\n",(0,t.jsx)(n.li,{children:"Restore the original method behavior, ensuring no side effects persist between test cases."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"benefits",children:"Benefits"}),"\n",(0,t.jsxs)(n.p,{children:["Using this approach ensures isolation between tests and prevents unintended interactions with the original implementation of ",(0,t.jsx)(n.code,{children:"someMethod"}),". It is particularly useful for testing code that depends on specific configurations or behaviors provided by the mocked method."]}),"\n",(0,t.jsx)(n.h2,{id:"logs-when-a-nodejs-instance-crashes",children:"Logs When a Node.js Instance Crashes"}),"\n",(0,t.jsx)(n.p,{children:"To track the logs when a Node.js instance encounters a crash, consider monitoring the following types of errors:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"JavaScript heap out of memory"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"uncaughtException"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"unhandledRejection"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"explanation-1",children:"Explanation"}),"\n",(0,t.jsx)(n.p,{children:"These logs indicate potential issues with the Node.js instance that may lead to application crashes or unexpected behavior. Here\u2019s an overview of each type of error:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"JavaScript heap out of memory"}),": This error occurs when the application exceeds the available memory heap, causing it to crash."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"uncaughtException"}),": This error occurs when an unhandled exception is thrown in the Node.js process, which can lead to the termination of the process."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"unhandledRejection"}),": This error happens when a promise rejection is not properly handled, potentially leading to application instability."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:"To handle these errors and ensure the application continues running smoothly, you can add appropriate event listeners in your Node.js application:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"process.on('uncaughtException', (err) => {\n  console.error('Uncaught exception:', err);\n  // Handle the exception appropriately\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled rejection:', reason);\n  // Handle the rejection appropriately\n});\n\nprocess.on('SIGUSR2', () => {\n  console.log('JavaScript heap out of memory detected.');\n  // Handle memory-related errors appropriately\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"These handlers allow you to log, manage, and respond to errors, improving the reliability of your Node.js application."}),"\n",(0,t.jsx)(n.h2,{id:"mocking-and-testing-with-jest-in-typescript",children:"Mocking and Testing with Jest in TypeScript"}),"\n",(0,t.jsx)(n.h3,{id:"1-base-code",children:(0,t.jsx)(n.strong,{children:"1. Base Code"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// src/libs/auth.ts\nexport const validateToken = (token: string): Promise<string> => {\n  ...\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-minimal-test-example",children:(0,t.jsx)(n.strong,{children:"2. Minimal Test Example"})}),"\n",(0,t.jsx)(n.p,{children:"Complete example of a test:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'jest.mock("../../../../src/libs/auth");\nimport { validateToken } from "../../../../src/libs/auth";\n\nconst mockValidateToken = validateToken as jest.Mock;\n\ndescribe("validateToken", () => {\n  beforeEach(() => {\n    mockValidateToken.mockReturnValueOnce(Promise.resolve(userExample()));\n  });\n\n  afterEach(() => {\n    mockValidateToken.mockClear();\n  });\n\n  it("should return mocked user data", async () => {\n    const result = await validateToken("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9");\n    expect(result).toEqual({ name: "S\xf8ren Kierkegaard" });\n  });\n});\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"-jest-docs-httpsjestjsiodocsapi",children:["\ud83d\udcd6 ",(0,t.jsx)(n.strong,{children:"Jest Docs"}),": ",(0,t.jsx)(n.a,{href:"https://jestjs.io/docs/api",children:"https://jestjs.io/docs/api"})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>r});var t=s(6540);const i={},o=t.createContext(i);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);