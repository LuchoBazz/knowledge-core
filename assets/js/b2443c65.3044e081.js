"use strict";(self.webpackChunkknowledge_core=self.webpackChunkknowledge_core||[]).push([[8090],{1113:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var s=i(4848),t=i(8453);const r={sidebar_position:1,title:"PostgreSQL",sidebar_label:"PostgreSQL"},a=void 0,l={id:"essential-dev-utils/db/postgresql",title:"PostgreSQL",description:"Retrieve PostgreSQL Autovacuum Settings",source:"@site/docs/essential-dev-utils/db/postgresql.md",sourceDirName:"essential-dev-utils/db",slug:"/essential-dev-utils/db/postgresql",permalink:"/knowledge-core/docs/essential-dev-utils/db/postgresql",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/essential-dev-utils/db/postgresql.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"PostgreSQL",sidebar_label:"PostgreSQL"},sidebar:"tutorialSidebar",previous:{title:"Database",permalink:"/knowledge-core/docs/category/database"},next:{title:"Prompt Engineering",permalink:"/knowledge-core/docs/category/prompt-engineering"}},c={},d=[{value:"Retrieve PostgreSQL Autovacuum Settings",id:"retrieve-postgresql-autovacuum-settings",level:2},{value:"Explanation",id:"explanation",level:3},{value:"Retrieve Rows Containing a Specific Tag (Method 1)",id:"retrieve-rows-containing-a-specific-tag-method-1",level:2},{value:"Explanation",id:"explanation-1",level:3},{value:"Retrieve Rows Containing a Specific Tag (Method 2)",id:"retrieve-rows-containing-a-specific-tag-method-2",level:2},{value:"Explanation",id:"explanation-2",level:3},{value:"Retrieve rows where <code>identifier</code> is in the JSON root",id:"retrieve-rows-where-identifier-is-in-the-json-root",level:2},{value:"Explanation",id:"explanation-3",level:3},{value:"Use JSON containment to check key/value",id:"use-json-containment-to-check-keyvalue",level:2},{value:"Explanation",id:"explanation-4",level:3},{value:"When <code>identifier</code> is inside a nested object",id:"when-identifier-is-inside-a-nested-object",level:2},{value:"Explanation",id:"explanation-5",level:3},{value:"Use path extraction with <code>#&gt;&gt;</code> for nested keys",id:"use-path-extraction-with--for-nested-keys",level:2},{value:"Explanation",id:"explanation-6",level:3},{value:"Partial match and case-insensitive search",id:"partial-match-and-case-insensitive-search",level:2},{value:"Explanation",id:"explanation-7",level:3},{value:"Numeric comparison (when the JSON value is numeric)",id:"numeric-comparison-when-the-json-value-is-numeric",level:2},{value:"Explanation",id:"explanation-8",level:3},{value:"Use jsonpath (Postgres 12+)",id:"use-jsonpath-postgres-12",level:2},{value:"Explanation",id:"explanation-9",level:3},{value:"Create indexes to speed up searches",id:"create-indexes-to-speed-up-searches",level:2},{value:"Explanation",id:"explanation-10",level:3},{value:"Short notes",id:"short-notes",level:2}];function o(e){const n={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"retrieve-postgresql-autovacuum-settings",children:"Retrieve PostgreSQL Autovacuum Settings"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT *\nFROM pg_settings \nWHERE name LIKE '%autovacuum%';\n"})}),"\n",(0,s.jsx)(n.h3,{id:"explanation",children:"Explanation"}),"\n",(0,s.jsx)(n.p,{children:"This SQL query retrieves all configuration settings related to autovacuum in PostgreSQL. Here\u2019s a breakdown of the query:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"SELECT *"}),": Selects all columns from the result set to provide comprehensive information about each setting."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"FROM pg_settings"}),": Queries the ",(0,s.jsx)(n.code,{children:"pg_settings"})," system catalog, which contains configuration parameters for the PostgreSQL instance."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"WHERE name LIKE '%autovacuum%'"}),": Filters the settings to include only those whose names contain the substring ",(0,s.jsx)(n.code,{children:"autovacuum"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This query is useful for analyzing and optimizing autovacuum behavior in a PostgreSQL database."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"retrieve-rows-containing-a-specific-tag-method-1",children:"Retrieve Rows Containing a Specific Tag (Method 1)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"WHERE 'INFO' = ANY(tags);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"explanation-1",children:"Explanation"}),"\n",(0,s.jsxs)(n.p,{children:["This condition checks if the value ",(0,s.jsx)(n.code,{children:"'INFO'"})," exists inside the array column ",(0,s.jsx)(n.code,{children:"tags"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"'INFO'"}),": The tag we want to search for."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"= ANY(tags)"}),": Tests whether ",(0,s.jsx)(n.code,{children:"'INFO'"})," matches at least one element of the array ",(0,s.jsx)(n.code,{children:"tags"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This method is useful when you want to see if a single value is present inside an array column."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"retrieve-rows-containing-a-specific-tag-method-2",children:"Retrieve Rows Containing a Specific Tag (Method 2)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"WHERE tags @> ARRAY['INFO'];\n"})}),"\n",(0,s.jsx)(n.h3,{id:"explanation-2",children:"Explanation"}),"\n",(0,s.jsxs)(n.p,{children:["This condition checks if the array column ",(0,s.jsx)(n.code,{children:"tags"})," contains the array ",(0,s.jsx)(n.code,{children:"['INFO']"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tags"}),": The array column."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@>"}),': The "contains" operator in PostgreSQL.']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ARRAY['INFO']"}),": An array with one element, ",(0,s.jsx)(n.code,{children:"'INFO'"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["This method is useful to test if the array column includes all values from another array. In this case, it checks if ",(0,s.jsx)(n.code,{children:"tags"})," contains ",(0,s.jsx)(n.code,{children:"'INFO'"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"retrieve-rows-where-identifier-is-in-the-json-root",children:["Retrieve rows where ",(0,s.jsx)(n.code,{children:"identifier"})," is in the JSON root"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT *\nFROM my_table\nWHERE data->>'identifier' = '12345';\n"})}),"\n",(0,s.jsx)(n.h3,{id:"explanation-3",children:"Explanation"}),"\n",(0,s.jsxs)(n.p,{children:["This SQL query finds rows where the JSON column ",(0,s.jsx)(n.code,{children:"data"})," has a key ",(0,s.jsx)(n.code,{children:"identifier"})," in the top level and its value is ",(0,s.jsx)(n.code,{children:"'12345'"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"SELECT *"}),": returns all columns for matching rows."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"FROM my_table"}),": use your table named ",(0,s.jsx)(n.code,{children:"my_table"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data->>'identifier'"}),": extracts the value of ",(0,s.jsx)(n.code,{children:"identifier"})," as text from the ",(0,s.jsx)(n.code,{children:"jsonb"})," column ",(0,s.jsx)(n.code,{children:"data"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"= '12345'"}),": compares the extracted text with ",(0,s.jsx)(n.code,{children:"'12345'"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["This query is useful when ",(0,s.jsx)(n.code,{children:"identifier"})," is stored at the top level of the JSON object."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"use-json-containment-to-check-keyvalue",children:"Use JSON containment to check key/value"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'SELECT *\nFROM my_table\nWHERE data @> \'{"identifier":"12345"}\'::jsonb;\n'})}),"\n",(0,s.jsx)(n.h3,{id:"explanation-4",children:"Explanation"}),"\n",(0,s.jsxs)(n.p,{children:["This query checks if the JSON object contains the pair ",(0,s.jsx)(n.code,{children:'"identifier": "12345"'}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data @> ..."}),": the ",(0,s.jsx)(n.code,{children:"@>"})," operator tests whether the left JSON contains the right JSON."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'\'{"identifier":"12345"}\'::jsonb'}),": a small JSON object on the right, cast to ",(0,s.jsx)(n.code,{children:"jsonb"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Use this when you want to check that the JSON contains a given key and value. It also works well when you check multiple keys at once."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"when-identifier-is-inside-a-nested-object",children:["When ",(0,s.jsx)(n.code,{children:"identifier"})," is inside a nested object"]}),"\n",(0,s.jsx)(n.p,{children:"Example JSON row:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{ "person": { "identifier": "12345", "type": "passport" } }\n'})}),"\n",(0,s.jsx)(n.p,{children:"Query:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT *\nFROM my_table\nWHERE data->'person'->>'identifier' = '12345';\n"})}),"\n",(0,s.jsx)(n.h3,{id:"explanation-5",children:"Explanation"}),"\n",(0,s.jsxs)(n.p,{children:["This finds ",(0,s.jsx)(n.code,{children:"identifier"})," inside the nested object ",(0,s.jsx)(n.code,{children:"person"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data->'person'"}),": returns the JSON object at key ",(0,s.jsx)(n.code,{children:"person"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"->>'identifier'"}),": then gets the ",(0,s.jsx)(n.code,{children:"identifier"})," value as text."]}),"\n",(0,s.jsxs)(n.li,{children:["Compare with ",(0,s.jsx)(n.code,{children:"'12345'"})," as before."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Use this when your JSON groups data inside objects (like ",(0,s.jsx)(n.code,{children:"person"}),", ",(0,s.jsx)(n.code,{children:"owner"}),", ",(0,s.jsx)(n.code,{children:"user"}),", etc.)."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"use-path-extraction-with--for-nested-keys",children:["Use path extraction with ",(0,s.jsx)(n.code,{children:"#>>"})," for nested keys"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT *\nFROM my_table\nWHERE data #>> '{person,identifier}' = '12345';\n"})}),"\n",(0,s.jsx)(n.h3,{id:"explanation-6",children:"Explanation"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"#>>"})," reads a text value using a path array."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"'{person,identifier}'"}),": the path \u2014 first ",(0,s.jsx)(n.code,{children:"person"}),", then ",(0,s.jsx)(n.code,{children:"identifier"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"#>>"})," returns text directly, so you can compare with ",(0,s.jsx)(n.code,{children:"="}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["This is a compact way to reach deep keys without chaining multiple ",(0,s.jsx)(n.code,{children:"->"})," operators."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"partial-match-and-case-insensitive-search",children:"Partial match and case-insensitive search"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT *\nFROM my_table\nWHERE data->>'identifier' ILIKE '123%';\n"})}),"\n",(0,s.jsx)(n.h3,{id:"explanation-7",children:"Explanation"}),"\n",(0,s.jsxs)(n.p,{children:["This does a case-insensitive match and finds identifiers that start with ",(0,s.jsx)(n.code,{children:"123"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ILIKE"})," works like ",(0,s.jsx)(n.code,{children:"LIKE"})," but ignores case."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"'123%'"}),' means "starts with 123".']}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Use this for searches where you only know part of the identifier or want case-insensitive matches."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"numeric-comparison-when-the-json-value-is-numeric",children:"Numeric comparison (when the JSON value is numeric)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT *\nFROM my_table\nWHERE (data->>'identifier')::bigint > 1000;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"explanation-8",children:"Explanation"}),"\n",(0,s.jsxs)(n.p,{children:["This converts the ",(0,s.jsx)(n.code,{children:"identifier"})," text to a number and compares it."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"(data->>'identifier')::bigint"}),": cast the extracted text to a big integer."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"> 1000"}),": numeric comparison."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Only use this when the JSON value is a number or a numeric string. If the cast fails, the query will error."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"use-jsonpath-postgres-12",children:"Use jsonpath (Postgres 12+)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT *\nFROM my_table\nWHERE jsonb_path_exists(data, '$.identifier ? (@ == \"12345\")');\n"})}),"\n",(0,s.jsx)(n.h3,{id:"explanation-9",children:"Explanation"}),"\n",(0,s.jsxs)(n.p,{children:["This uses ",(0,s.jsx)(n.code,{children:"jsonpath"})," to check if ",(0,s.jsx)(n.code,{children:"identifier"})," equals ",(0,s.jsx)(n.code,{children:'"12345"'}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"jsonb_path_exists(data, '<path>')"}),": returns true if the path condition matches."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"$.identifier"}),": the ",(0,s.jsx)(n.code,{children:"identifier"})," at the root."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'? (@ == "12345")'}),": a filter that checks equality."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"jsonpath"})," is powerful for complex conditions and arrays."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"create-indexes-to-speed-up-searches",children:"Create indexes to speed up searches"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- fast equality on the identifier value\nCREATE INDEX idx_my_table_identifier ON my_table ((data->>'identifier'));\n\n-- general jsonb index for containment and other jsonb queries\nCREATE INDEX idx_my_table_data_gin ON my_table USING gin (data);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"explanation-10",children:"Explanation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The first index is an expression (btree) on ",(0,s.jsx)(n.code,{children:"data->>'identifier'"}),". Use it when you run many equality queries like ",(0,s.jsx)(n.code,{children:"= '12345'"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The second index is a GIN index on the whole ",(0,s.jsx)(n.code,{children:"jsonb"})," column. It helps queries that use ",(0,s.jsx)(n.code,{children:"@>"})," and other jsonb operators."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Create the index that fits your common queries. You can have both if needed."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"short-notes",children:"Short notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Replace ",(0,s.jsx)(n.code,{children:"my_table"})," and ",(0,s.jsx)(n.code,{children:"data"})," with your real table and column names."]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"EXPLAIN ANALYZE"})," to check query plans and see if indexes are used."]}),"\n",(0,s.jsxs)(n.li,{children:["Test casting and ",(0,s.jsx)(n.code,{children:"ILIKE"})," carefully to avoid errors or slow queries."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["If you want, I can give a small full example with ",(0,s.jsx)(n.code,{children:"CREATE TABLE"}),", some ",(0,s.jsx)(n.code,{children:"INSERT"})," rows, and ",(0,s.jsx)(n.code,{children:"EXPLAIN ANALYZE"})," for one query."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var s=i(6540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);